@page "/plants"
@using PlantApp.Models
@using PlantApp.Services
@inject PlantService PlantService

<PageTitle>Plant Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Plant Management</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">
        Manage the plant database with multi-language support.
    </MudText>

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Plant Database</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudSelect T="string" @bind-Value="selectedLanguage" Label="Language" Variant="Variant.Outlined" Dense="true">
                    <MudSelectItem Value="@("EN")">English</MudSelectItem>
                    <MudSelectItem Value="@("FR")">Fran√ßais</MudSelectItem>
                    <MudSelectItem Value="@("DE")">Deutsch</MudSelectItem>
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="Icons.Material.Filled.Add" OnClick="OpenAddDialog" Class="ml-3">
                    Add Plant
                </MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="searchString" Placeholder="Search plants..." Adornment="Adornment.Start" 
                         AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" 
                         Immediate="true" DebounceInterval="300" OnDebounceIntervalElapsed="SearchPlants" />
            
            <MudDataGrid T="Plant" Items="@filteredPlants" SortMode="SortMode.Multiple" Filterable="true" 
                        QuickFilter="@_quickFilter" Hover="true" Striped="true" Dense="true" Class="mt-4">
                <Columns>
                    <PropertyColumn Property="x => x.GetShortId()" Title="ID" Sortable="false" />
                    <PropertyColumn Property="x => x.GetName(selectedLanguage)" Title="Name" />
                    <PropertyColumn Property="x => x.LatinName" Title="Latin Name" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" 
                                          StartIcon="Icons.Material.Filled.Edit" OnClick="@(() => EditPlant(context.Item))">
                                    Edit
                                </MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small" 
                                          StartIcon="Icons.Material.Filled.Delete" OnClick="@(() => DeletePlant(context.Item))">
                                    Delete
                                </MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Plant" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string selectedLanguage = "EN";
    private string searchString = "";
    private List<Plant> plants = new();
    private List<Plant> filteredPlants = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPlants();
    }

    private async Task LoadPlants()
    {
        plants = await PlantService.GetAllPlantsAsync();
        filteredPlants = plants;
    }

    private void SearchPlants()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredPlants = plants;
        }
        else
        {
            filteredPlants = plants.Where(p => 
                p.GetName(selectedLanguage).Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                p.LatinName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private Func<Plant, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return x.GetName(selectedLanguage).Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               x.LatinName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    };

    private void OpenAddDialog()
    {
        // TODO: Implement add plant dialog
    }

    private void EditPlant(Plant plant)
    {
        // TODO: Implement edit plant dialog
    }

    private void DeletePlant(Plant plant)
    {
        // TODO: Implement delete confirmation dialog
    }
}